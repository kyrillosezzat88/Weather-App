{"version":3,"sources":["img/bg.jpg","compnetes/From.js","compnetes/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","InputData","state","city","country","handelinput","e","_this","setState","Object","defineProperty","target","name","value","handelshumit","preventDefault","props","weatherForm","document","getElementsByTagName","getElementById","style","display","handelButton","react_default","a","createElement","onSubmit","this","type","placeholder","onChange","onClick","Component","Weather","_ref","ShowData","className","id","tempreature","humidity","error","api_key","App","description","addweather","weth","axios","get","concat","then","res","data","main","temp","sys","From","compnetes_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2adb4e92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.b6796c73.jpg\";","import React , {Component} from 'react';\r\nclass InputData extends Component{\r\n    state ={\r\n        city:'',\r\n        country:''\r\n    }\r\n handelinput = (e)=>{\r\n     this.setState({\r\n         [e.target.name] : e.target.value\r\n     })\r\n }\r\n    handelshumit = (e)=>{\r\n        e.preventDefault();\r\n        this.props.weatherForm(this.state);\r\n        if(document.getElementsByTagName('input')[0].value && document.getElementsByTagName('input')[1].value){\r\n           document.getElementById('info').style.display = 'block';\r\n        } else{\r\n            document.getElementById('info').style.display = 'none';\r\n        }\r\n    }\r\n    handelButton = ()=>{\r\n        if(document.getElementsByTagName('input')[0].value && document.getElementsByTagName('input')[1].value){\r\n            document.getElementById('info').style.display = 'block';\r\n         } else{\r\n             document.getElementById('info').style.display = 'none';\r\n         }\r\n    }\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.handelshumit}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\" onChange={this.handelinput} /> \r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\" onChange={this.handelinput}/> \r\n                <button onClick={this.handelButton}>Get Weather</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default InputData;","import React from 'react'\r\nconst Weather = ({ShowData})=>{\r\n    return(\r\n        <div className=\"Show\">\r\n           <div id=\"info\">\r\n           <p><span>City:</span> {ShowData.city}</p>\r\n            <p><span>Country:</span> {ShowData.country}</p>\r\n            <p><span>Tempreature:</span> {ShowData.tempreature}</p>\r\n            <p><span>Humidity:</span> {ShowData.humidity}</p>\r\n           </div>\r\n            <p className=\"error\">{ShowData.error}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Weather;","import React, { Component } from 'react';\nimport InputData from './compnetes/From';\nimport Weather from './compnetes/Weather';\nimport background from './img/bg.jpg'\nimport axios from 'axios'\n\nconst api_key = '21ffa6e425f48f62567dca17adcee17f';\n//http://api.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=e36ed364400282e43250b6c4c0274d44\nclass App extends Component {\n  state = {\n    tempreature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:''\n  }\n  addweather = (weth)=>{\n    if(weth.country && weth.country){\n      axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${weth.city},${weth.country}&appid=${api_key}`)\n      .then(res=>{\n        this.setState({\n          tempreature:`${res.data.main.temp}` + `F`,\n          city:`${res.data.name}`,\n          country:`${res.data.sys.country}`,\n          humidity:`${res.data.main.humidity}` + `%`,\n          description:`${res.data.description}`,\n          error:''\n        })\n      })\n    } else{\n      this.setState({\n        tempreature:'',\n        city:'',\n        country:'',\n        humidity:'',\n        description:'',\n        error:'Please Enter Country and city to Get Weather'\n      })\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <div className=\"image\">\n            <h1>Weather Finder</h1>\n            <p>Find Out The Tempreature,Weather Condition and More</p>\n        </div>\n        <div className='content'>\n        <InputData weatherForm ={this.addweather} />\n        <Weather ShowData ={this.state}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}